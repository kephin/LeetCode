/*
389. Find the Difference

Given two strings s and t which consist of only lowercase letters.
String t is generated by random shuffling string s and then add one more letter at a random position.
Find the letter that was added in t.
*/

const expect = require('expect');

describe('389 Find the Difference', () => {
  it('returns the difference between two strings', () => {
    //arragne
    const input1 = 'abcdeghijk';
    const input2 = 'kabcjihgedf';
    const expected = 'f';
    //act
    const actual = findTheDifference(input1, input2);
    //assert
    expect(actual).toBe(expected);
  });
});

const findTheDifference_1 = (input1, input2) => {
  return [...input2].filter(input2Val => {
    if (input1.includes(input2Val)) {
      const input1Array = [...input1];
      input1Array.splice(input1Array.indexOf(input2Val), 1);
      input1 = input1Array.join('');
      return false;
    }
    return true;
  })[0];
};

const findTheDifference_2 = (input1, input2) => {
  if (input1.length === 0) return input2;
  const input1Sum = input1
    .split('')
    .map(e => e.charCodeAt(0)).reduce((a, b) => a + b);
  const input2Sum = input2
    .split('')
    .map(e => e.charCodeAt(0)).reduce((a, b) => a + b);
  return String.fromCharCode(input2Sum - input1Sum);
};

// Use the commutative property of xor and the fact that A^A === 0
const findTheDifference_3 = (input1, input2) => {
  let charCode = input2.charCodeAt(input2.length - 1);
  [...input1].forEach((value, index) => {
    charCode = charCode ^ input1.charCodeAt(index) ^ input2.charCodeAt(index);
  });
  return String.fromCharCode(charCode);
};

const findTheDifference = (input1, input2) => {
  const charCode = [...input1, ...input2].reduce((acc, cur) => acc ^ cur.charCodeAt(0), 0);
  return String.fromCharCode(charCode);
};
